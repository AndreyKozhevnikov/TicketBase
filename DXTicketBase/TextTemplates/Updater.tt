<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# FileName=@"\{0}.Module\DatabaseUpdate\Updater.cs"; #>
using System;
using System.Linq;
using DevExpress.ExpressApp;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.Base;
using DevExpress.ExpressApp.Updating;
using DevExpress.Xpo;
using DevExpress.ExpressApp.Xpo;
using DevExpress.Persistent.BaseImpl;
using DevExpress.ExpressApp.Security;
using DevExpress.Persistent.BaseImpl.PermissionPolicy;

using dxTestSolution.Module.BusinessObjects;

namespace dxTestSolution.Module.DatabaseUpdate {
    public class Updater : ModuleUpdater {
        public Updater(IObjectSpace objectSpace, Version currentDBVersion) :
            base(objectSpace, currentDBVersion) {
        }
        public override void UpdateDatabaseAfterUpdateSchema() {
            base.UpdateDatabaseAfterUpdateSchema();
            var cnt = ObjectSpace.GetObjects<Contact>().Count;
            if(cnt > 0) {
                return;
            }
            for (int i = 0; i < 2; i++) {
                string contactName = "FirstName" + i;
                var contact = CreateObject<Contact>("FirstName", contactName);
                contact.LastName = "LastName" + i;
				contact.Age = i * 10;
                for(int j = 0; j < 2; j++) {
                    string taskName = "Subject" + i + " - " + j;
                    var task = CreateObject<MyTask>("Subject", taskName);
                    task.AssignedTo = contact;
                }
            }
			 <# if (HasSecurity){ #>
            PermissionPolicyRole adminRole = ObjectSpace.FindObject<PermissionPolicyRole>(new BinaryOperator("Name", SecurityStrategy.AdministratorRoleName));
            if(adminRole == null) {
                adminRole = CreateAdministratorRole();
			}

            PermissionPolicyRole userRole = ObjectSpace.FindObject<PermissionPolicyRole>(new BinaryOperator("Name", "Users"));
            if(userRole == null) {
                userRole = CreateUsersRole();
            }

            PermissionPolicyUser adminUser = ObjectSpace.FindObject<PermissionPolicyUser>(new BinaryOperator("UserName", "Admin"));
            if(adminUser == null) {
                adminUser = ObjectSpace.CreateObject<PermissionPolicyUser>();
                adminUser.UserName = "Admin";
                adminUser.SetPassword("");
            }

            PermissionPolicyUser commonUser = ObjectSpace.FindObject<PermissionPolicyUser>(new BinaryOperator("UserName", "User"));
            if(commonUser == null) {
                commonUser = ObjectSpace.CreateObject<PermissionPolicyUser>();
                commonUser.UserName = "User";
                commonUser.SetPassword("");
            }

            adminUser.Roles.Add(adminRole);
            commonUser.Roles.Add(userRole);
			 <# } #>

			ObjectSpace.CommitChanges(); 
        }
		 <# if (HasSecurity){ #>
        public PermissionPolicyRole CreateAdministratorRole() {
            PermissionPolicyRole role = ObjectSpace.FindObject<PermissionPolicyRole>(new BinaryOperator("Name", "Administrator"));
            if(role == null) {
                role = ObjectSpace.CreateObject<PermissionPolicyRole>();
                role.Name = "Administrator";
                role.PermissionPolicy = SecurityPermissionPolicy.DenyAllByDefault;
                role.IsAdministrative = true;
            }
            return role;
        }
        public PermissionPolicyRole CreateUsersRole() {
            PermissionPolicyRole role = ObjectSpace.FindObject<PermissionPolicyRole>(new BinaryOperator("Name", "Users"));
            if(role == null) {
                role = ObjectSpace.CreateObject<PermissionPolicyRole>();
                role.Name = "Users";
                role.PermissionPolicy = SecurityPermissionPolicy.DenyAllByDefault;
                role.AddTypePermission<Contact>(SecurityOperations.FullAccess, SecurityPermissionState.Allow);
                role.AddTypePermission<PermissionPolicyUser>(SecurityOperations.FullAccess, SecurityPermissionState.Deny);
                role.AddObjectPermission<PermissionPolicyUser>(SecurityOperations.ReadOnlyAccess, "[Oid] = CurrentUserId()", SecurityPermissionState.Allow);
                role.AddMemberPermission<PermissionPolicyUser>(SecurityOperations.Write, "StoredPassword", null, SecurityPermissionState.Allow);
                role.AddMemberPermission<PermissionPolicyUser>(SecurityOperations.Write, "ChangePasswordOnFirstLogon", null, SecurityPermissionState.Allow);
                role.AddTypePermission<PermissionPolicyRole>(SecurityOperations.Read, SecurityPermissionState.Allow);
                role.AddTypePermission<PermissionPolicyRole>("Write;Create;Delete;Navigate", SecurityPermissionState.Deny);
                role.AddTypePermission<PermissionPolicyTypePermissionObject>(SecurityOperations.Read, SecurityPermissionState.Allow);
                role.AddNavigationPermission(@"Application/NavigationItems/Items/Default/Items/Contact_ListView", SecurityPermissionState.Allow);
            }
            return role;
        }
		 <# } #>
        T CreateObject<T>(string propertyName,string value) {
       
            T theObject = ObjectSpace.FindObject<T>(new OperandProperty(propertyName) == value);
            if (theObject == null){
                theObject = ObjectSpace.CreateObject<T>();
                ((XPBaseObject)(Object)theObject).SetMemberValue(propertyName, value);
            }
          
            return theObject;

        }

        public override void UpdateDatabaseBeforeUpdateSchema() {
            base.UpdateDatabaseBeforeUpdateSchema();
            //if(CurrentDBVersion < new Version("1.1.0.0") && CurrentDBVersion > new Version("0.0.0.0")) {
            //    RenameColumn("DomainObject1Table", "OldColumnName", "NewColumnName");
            //}
        }
    }
}
